import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { getProfile } from '../../actions/account/getProfile';
import { updateProfile } from '../../actions/account/updateProfile';

/**
 * Represents the state of the profile feature.
 */
type ProfileState = {
  loading: boolean;
  data: null | any;
  error: null | any;

  // data to persist using redux
  firstName: string;
  lastName: string;
  email: string;
}

/**
 * The initial state of the profile feature.
 */
const initialState: ProfileState = {
  loading: false,
  data: null,
  error: null,

  firstName: '',
  lastName: '',
  email: '',
};

/**
 * The profile slice of the Redux store.
 */
const profileSlice = createSlice({
  name: 'profile',
  initialState,
  reducers: {
    /**
     * Sets the loading state of the profile data request.
     *
     * @param {ProfileState} state - The current state.
     * @param {PayloadAction<boolean>} action - The action object containing the loading state.
     */
    profileLoading: (state, action: PayloadAction<boolean>) => {
      state.loading = action.payload;
    },

    /**
     * Updates the state with the fetched profile data.
     *
     * @param {ProfileState} state - The current state.
     * @param {PayloadAction<any>} action - The action object containing the profile data.
     */
    profileSuccess: (state, action: PayloadAction<any>) => {
      state.data = action.payload;
      state.error = null;
    },

    /**
     * Updates the state with the profile data request failure error.
     *
     * @param {ProfileState} state - The current state.
     * @param {PayloadAction<any>} action - The action object containing the error.
     */
    profileFailure: (state, action: PayloadAction<any>) => {
      state.error = action.payload;
    },
    updateProfile: (state, action: PayloadAction<Partial<ProfileState>>) => {
      state = { ...state, ...action.payload };
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(getProfile.pending, (state) => {
        state.loading = true;
      })
      .addCase(getProfile.fulfilled, (state, action) => {
        state.loading = false;
        state.data = action.payload;
        state.error = null;
      })
      .addCase(getProfile.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      })
      .addCase(updateProfile.pending, (state) => {
        state.loading = true;
      })
      .addCase(updateProfile.fulfilled, (state, action) => {
        state.loading = false;
        state.data = action.payload;
        state.error = null;
      })
      .addCase(updateProfile.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      });
  },
});

/**
 * Action creators generated by the profile slice.
 */
export const { profileLoading, profileSuccess, profileFailure } = profileSlice.actions;

/**
 * The reducer function for the profile slice.
 */
export const profileReducer = profileSlice.reducer;
