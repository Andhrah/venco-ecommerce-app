import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { getProducts } from '../../actions/products/products';

/**
 * Represents the state of the products feature.
 */
export type ProductsState = {
  loading: boolean;
  data: null | any;
  error: null | any;
}

/**
 * The initial state of the profile feature.
 */
export const initialState: ProductsState = {
  loading: false,
  data: null,
  error: null,
};

/**
 * The products slice of the Redux store.
 */
const productsSlice = createSlice({
  name: 'products',
  initialState,
  reducers: {
    /**
     * Sets the loading state of the products data request.
     *
     * @param {ProductsState} state - The current state.
     * @param {PayloadAction<boolean>} action - The action object containing the loading state.
     */
    productsLoading: (state, action: PayloadAction<boolean>) => {
      state.loading = action.payload;
    },

    /**
     * Updates the state with the fetched products data.
     *
     * @param {ProductsState} state - The current state.
     * @param {PayloadAction<any>} action - The action object containing the products data.
     */
    productsSuccess: (state, action: PayloadAction<any>) => {
      state.data = action.payload;
      state.error = null;
    },

    /**
     * Updates the state with the products data request failure error.
     *
     * @param {ProductsState} state - The current state.
     * @param {PayloadAction<any>} action - The action object containing the error.
     */
    productsFailure: (state, action: PayloadAction<any>) => {
      state.error = action.payload;
    },
    setCategoriesData: (state, action: PayloadAction<ProductsState>) => {
      state.data = action.payload.data;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(getProducts.pending, (state) => {
        state.loading = true;
      })
      .addCase(getProducts.fulfilled, (state, action) => {
        state.loading = false;
        state.data = action.payload;
        state.error = null;
      })
      .addCase(getProducts.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      });
  },
});

/**
 * Action creators generated by the products slice.
 */
export const { productsLoading, productsSuccess, productsFailure } = productsSlice.actions;

/**
 * The reducer function for the products slice.
 */
export const productsReducer = productsSlice.reducer;
