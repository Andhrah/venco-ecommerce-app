import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { loginUser } from '../../actions/auth/login';

/**
 * Represents the state of the login feature.
 */
export type LoginState = {
  loading: boolean;
  data: null | any;
  error: null | any;

  // data to persist using redux
  firstName: string;
  lastName: string;
  email: string;
}

/**
 * The initial state of the login feature.
 */
const initialState: LoginState = {
  loading: false,
  data: null,
  error: null,
  firstName: '',
  lastName: '',
  email: '',
};

/**
 * The login slice of the Redux store.
 */
const loginSlice = createSlice({
  name: 'login',
  initialState,
  reducers: {
    /**
     * Sets the loading state of the login process.
     *
     * @param {LoginState} state - The current state.
     * @param {PayloadAction<boolean>} action - The action object containing the loading state.
     */
    loginLoading: (state, action: PayloadAction<boolean>) => {
      state.loading = action.payload;
    },
    /**
     * Updates the state with the successful login data.
     *
     * @param {LoginState} state - The current state.
     * @param {PayloadAction<any>} action - The action object containing the login data.
     */
    loginSuccess: (state, action: PayloadAction<any>) => {
      state.data = action.payload;
      state.error = null;
    },
    /**
     * Updates the state with the login failure error.
     *
     * @param {LoginState} state - The current state.
     * @param {PayloadAction<any>} action - The action object containing the login error.
     */
    loginFailure: (state, action: PayloadAction<any>) => {
      state.error = action.payload;
    },
    // user login data to persist in redux state
    setProfile: (state, action: PayloadAction<LoginState>) => {
      state.firstName = action.payload.firstName;
      state.lastName = action.payload.lastName;
      state.email = action.payload.email;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(loginUser.pending, (state) => {
        state.loading = true;
      })
      .addCase(loginUser.fulfilled, (state, action) => {
        state.loading = false;
        state.data = action.payload;
        state.error = null;
      })
      .addCase(loginUser.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      });
  },
});

/**
 * Action creators generated by the login slice.
 */
export const { loginLoading, loginSuccess, loginFailure } = loginSlice.actions;

/**
 * The reducer function for the login slice.
 */
export const loginReducer = loginSlice.reducer;
